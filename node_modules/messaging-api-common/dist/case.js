"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const camel_case_1 = __importDefault(require("camel-case"));
const map_obj_1 = __importDefault(require("map-obj"));
const pascal_case_1 = __importDefault(require("pascal-case"));
const snake_case_1 = __importDefault(require("snake-case"));
function isLastCharNumber(key) {
    return /^\d$/.test(key[key.length - 1]);
}
function splitLastChar(key) {
    return `${key.slice(0, key.length - 1)}_${key.slice(key.length - 1, key.length)}`;
}
function snakecase(str) {
    const matches = str.match(/\d+/g);
    if (!matches) {
        return snake_case_1.default(str);
    }
    let modifiedStr = str;
    for (let i = 0; i < matches.length; i++) {
        const match = matches[i];
        const mathIndex = modifiedStr.indexOf(match);
        modifiedStr = `${modifiedStr.slice(0, mathIndex)}_${modifiedStr.slice(mathIndex, modifiedStr.length)}`;
    }
    return snake_case_1.default(modifiedStr);
}
exports.snakecase = snakecase;
function snakecaseKeys(obj, options = {}) {
    return map_obj_1.default(obj, (key, val) => [snakecase(key), val], options);
}
exports.snakecaseKeys = snakecaseKeys;
function snakecaseKeysDeep(obj) {
    return snakecaseKeys(obj, { deep: true });
}
exports.snakecaseKeysDeep = snakecaseKeysDeep;
function camelcase(str) {
    const parts = str.split('_');
    const modifiedStr = parts.reduce((acc, part) => {
        if (acc === '')
            return part;
        if (/^\d+/.test(part)) {
            return acc + part;
        }
        return `${acc}_${part}`;
    }, '');
    return camel_case_1.default(modifiedStr);
}
exports.camelcase = camelcase;
function camelcaseKeys(obj, options = {}) {
    return map_obj_1.default(obj, (key, val) => [camelcase(key), val], options);
}
exports.camelcaseKeys = camelcaseKeys;
function camelcaseKeysDeep(obj) {
    return camelcaseKeys(obj, { deep: true });
}
exports.camelcaseKeysDeep = camelcaseKeysDeep;
function pascalcase(str) {
    return pascal_case_1.default(isLastCharNumber(str) ? splitLastChar(str) : str);
}
exports.pascalcase = pascalcase;
function pascalcaseKeys(obj, options = {}) {
    return map_obj_1.default(obj, (key, val) => [pascalcase(key), val], options);
}
exports.pascalcaseKeys = pascalcaseKeys;
function pascalcaseKeysDeep(obj) {
    return pascalcaseKeys(obj, { deep: true });
}
exports.pascalcaseKeysDeep = pascalcaseKeysDeep;
//# sourceMappingURL=case.js.map