"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_error_1 = __importDefault(require("axios-error"));
const axios_1 = __importDefault(require("axios"));
const image_type_1 = __importDefault(require("image-type"));
const invariant_1 = __importDefault(require("invariant"));
const warning_1 = __importDefault(require("warning"));
const messaging_api_common_1 = require("messaging-api-common");
const Line_1 = __importDefault(require("./Line"));
function handleError(err) {
    if (err.response && err.response.data) {
        const { message, details } = err.response.data;
        let msg = `LINE API - ${message}`;
        if (details && details.length > 0) {
            details.forEach(detail => {
                msg += `\n- ${detail.property}: ${detail.message}`;
            });
        }
        throw new axios_error_1.default(msg, err);
    }
    throw new axios_error_1.default(err.message, err);
}
class LineClient {
    constructor(accessTokenOrConfig, channelSecret) {
        let origin;
        if (accessTokenOrConfig && typeof accessTokenOrConfig === 'object') {
            const config = accessTokenOrConfig;
            this._accessToken = config.accessToken;
            this._channelSecret = config.channelSecret;
            this._onRequest = config.onRequest;
            origin = config.origin;
        }
        else {
            this._accessToken = accessTokenOrConfig;
            this._channelSecret = channelSecret;
        }
        this._axios = axios_1.default.create({
            baseURL: `${origin || 'https://api.line.me'}/`,
            headers: {
                Authorization: `Bearer ${this._accessToken}`,
                'Content-Type': 'application/json',
            },
        });
        this._axios.interceptors.request.use(messaging_api_common_1.createRequestInterceptor({ onRequest: this._onRequest }));
    }
    static connect(accessTokenOrConfig, channelSecret) {
        return new LineClient(accessTokenOrConfig, channelSecret);
    }
    get axios() {
        return this._axios;
    }
    get accessToken() {
        return this._accessToken;
    }
    /**
     * Reply Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-reply-message
     */
    replyRawBody(body, { accessToken: customAccessToken } = {}) {
        return this._axios
            .post('/v2/bot/message/reply', body, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    reply(replyToken, messages, options) {
        return this.replyRawBody({ replyToken, messages }, options);
    }
    replyMessages(replyToken, messages, options) {
        return this.reply(replyToken, messages, options);
    }
    replyText(replyToken, text, options) {
        return this.reply(replyToken, [Line_1.default.createText(text, options)], options);
    }
    replyImage(replyToken, image, options) {
        return this.reply(replyToken, [Line_1.default.createImage(image, options)], options);
    }
    replyVideo(replyToken, video, options) {
        return this.reply(replyToken, [Line_1.default.createVideo(video, options)], options);
    }
    replyAudio(replyToken, audio, options) {
        return this.reply(replyToken, [Line_1.default.createAudio(audio, options)], options);
    }
    replyLocation(replyToken, location, options) {
        return this.reply(replyToken, [Line_1.default.createLocation(location, options)], options);
    }
    replySticker(replyToken, sticker, options) {
        return this.reply(replyToken, [Line_1.default.createSticker(sticker, options)], options);
    }
    /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
    replyImagemap(replyToken, altText, imagemap, options) {
        return this.reply(replyToken, [Line_1.default.createImagemap(altText, imagemap, options)], options);
    }
    /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
    replyFlex(replyToken, altText, flex, options) {
        return this.reply(replyToken, [Line_1.default.createFlex(altText, flex, options)], options);
    }
    /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
    replyTemplate(replyToken, altText, template, options) {
        return this.reply(replyToken, [Line_1.default.createTemplate(altText, template, options)], options);
    }
    replyButtonTemplate(replyToken, altText, buttonTemplate, options) {
        return this.reply(replyToken, [Line_1.default.createButtonTemplate(altText, buttonTemplate, options)], options);
    }
    replyButtonsTemplate(replyToken, altText, buttonTemplate, options) {
        return this.replyButtonTemplate(replyToken, altText, buttonTemplate, options);
    }
    replyConfirmTemplate(replyToken, altText, confirmTemplate, options) {
        return this.reply(replyToken, [Line_1.default.createConfirmTemplate(altText, confirmTemplate, options)], options);
    }
    replyCarouselTemplate(replyToken, altText, columns, _a = {}) {
        var { imageAspectRatio, imageSize } = _a, options = __rest(_a, ["imageAspectRatio", "imageSize"]);
        return this.reply(replyToken, [
            Line_1.default.createCarouselTemplate(altText, columns, Object.assign({ imageAspectRatio,
                imageSize }, options)),
        ], options);
    }
    replyImageCarouselTemplate(replyToken, altText, columns, options) {
        return this.reply(replyToken, [Line_1.default.createImageCarouselTemplate(altText, columns, options)], options);
    }
    /**
     * Push Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-push-message
     */
    pushRawBody(body, { accessToken: customAccessToken } = {}) {
        return this._axios
            .post('/v2/bot/message/push', body, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    push(to, messages, options) {
        return this.pushRawBody({ to, messages }, options);
    }
    pushMessages(to, messages, options) {
        return this.push(to, messages, options);
    }
    pushText(to, text, options) {
        return this.push(to, [Line_1.default.createText(text, options)], options);
    }
    pushImage(to, image, options) {
        return this.push(to, [Line_1.default.createImage(image, options)], options);
    }
    pushVideo(to, video, options) {
        return this.push(to, [Line_1.default.createVideo(video, options)], options);
    }
    pushAudio(to, audio, options) {
        return this.push(to, [Line_1.default.createAudio(audio, options)], options);
    }
    pushLocation(to, location, options) {
        return this.push(to, [Line_1.default.createLocation(location, options)], options);
    }
    pushSticker(to, sticker, options) {
        return this.push(to, [Line_1.default.createSticker(sticker, options)], options);
    }
    /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
    pushImagemap(to, altText, imagemap, options) {
        return this.push(to, [Line_1.default.createImagemap(altText, imagemap, options)], options);
    }
    /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
    pushFlex(to, altText, flex, options) {
        return this.push(to, [Line_1.default.createFlex(altText, flex, options)], options);
    }
    /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
    pushTemplate(to, altText, template, options) {
        return this.push(to, [Line_1.default.createTemplate(altText, template, options)], options);
    }
    pushButtonTemplate(to, altText, buttonTemplate, options) {
        return this.push(to, [Line_1.default.createButtonTemplate(altText, buttonTemplate, options)], options);
    }
    pushButtonsTemplate(to, altText, buttonTemplate, options) {
        return this.pushButtonTemplate(to, altText, buttonTemplate, options);
    }
    pushConfirmTemplate(to, altText, confirmTemplate, options) {
        return this.push(to, [Line_1.default.createConfirmTemplate(altText, confirmTemplate, options)], options);
    }
    pushCarouselTemplate(to, altText, columns, _a = {}) {
        var { imageAspectRatio, imageSize } = _a, options = __rest(_a, ["imageAspectRatio", "imageSize"]);
        return this.push(to, [
            Line_1.default.createCarouselTemplate(altText, columns, Object.assign({ imageAspectRatio,
                imageSize }, options)),
        ], options);
    }
    pushImageCarouselTemplate(to, altText, columns, options) {
        return this.push(to, [Line_1.default.createImageCarouselTemplate(altText, columns, options)], options);
    }
    /**
     * Multicast
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#send-multicast-messages
     */
    multicastRawBody(body, { accessToken: customAccessToken } = {}) {
        return this._axios
            .post('/v2/bot/message/multicast', body, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    multicast(to, messages, options) {
        return this.multicastRawBody({ to, messages }, options);
    }
    multicastMessages(to, messages, options) {
        return this.multicast(to, messages, options);
    }
    multicastText(to, text, options) {
        return this.multicast(to, [Line_1.default.createText(text, options)], options);
    }
    multicastImage(to, image, options) {
        return this.multicast(to, [Line_1.default.createImage(image, options)], options);
    }
    multicastVideo(to, video, options) {
        return this.multicast(to, [Line_1.default.createVideo(video, options)], options);
    }
    multicastAudio(to, audio, options) {
        return this.multicast(to, [Line_1.default.createAudio(audio, options)], options);
    }
    multicastLocation(to, location, options) {
        return this.multicast(to, [Line_1.default.createLocation(location, options)], options);
    }
    multicastSticker(to, sticker, options) {
        return this.multicast(to, [Line_1.default.createSticker(sticker, options)], options);
    }
    /**
     * Imagemap Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#imagemap-message
     */
    multicastImagemap(to, altText, imagemap, options) {
        return this.multicast(to, [Line_1.default.createImagemap(altText, imagemap, options)], options);
    }
    /**
     * Flex Message
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#flex-message
     */
    multicastFlex(to, altText, flex, options) {
        return this.multicast(to, [Line_1.default.createFlex(altText, flex, options)], options);
    }
    /**
     * Template Messages
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#template-messages
     */
    multicastTemplate(to, altText, template, options) {
        return this.multicast(to, [Line_1.default.createTemplate(altText, template, options)], options);
    }
    multicastButtonTemplate(to, altText, buttonTemplate, options) {
        return this.multicast(to, [Line_1.default.createButtonTemplate(altText, buttonTemplate, options)], options);
    }
    multicastButtonsTemplate(to, altText, buttonTemplate, options) {
        return this.multicastButtonTemplate(to, altText, buttonTemplate, options);
    }
    multicastConfirmTemplate(to, altText, confirmTemplate, options) {
        return this.multicast(to, [Line_1.default.createConfirmTemplate(altText, confirmTemplate, options)], options);
    }
    multicastCarouselTemplate(to, altText, columns, _a = {}) {
        var { imageAspectRatio, imageSize } = _a, options = __rest(_a, ["imageAspectRatio", "imageSize"]);
        return this.multicast(to, [
            Line_1.default.createCarouselTemplate(altText, columns, Object.assign({ imageAspectRatio,
                imageSize }, options)),
        ], options);
    }
    multicastImageCarouselTemplate(to, altText, columns, options) {
        return this.multicast(to, [Line_1.default.createImageCarouselTemplate(altText, columns, options)], options);
    }
    /**
     * Content
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-content
     */
    getMessageContent(messageId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get(`/v2/bot/message/${messageId}/content`, Object.assign({ responseType: 'arraybuffer' }, (customAccessToken
            ? { headers: { Authorization: `Bearer ${customAccessToken}` } }
            : undefined)))
            .then(res => res.data, handleError);
    }
    retrieveMessageContent(messageId, options) {
        warning_1.default(false, '`retrieveMessageContent` is deprecated. Use `getMessageContent` instead.');
        return this.getMessageContent(messageId, options);
    }
    /**
     * Get User Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-profile
     * displayName, userId, pictureUrl, statusMessage
     */
    getUserProfile(userId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get(`/v2/bot/profile/${userId}`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError)
            .catch(err => {
            if (err.response && err.response.status === 404) {
                return null;
            }
            return handleError(err);
        });
    }
    /**
     * Get Group Member Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-group-member-profile
     */
    getGroupMemberProfile(groupId, userId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get(`/v2/bot/group/${groupId}/member/${userId}`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    /**
     * Get Room Member Profile
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-room-member-profile
     */
    getRoomMemberProfile(roomId, userId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get(`/v2/bot/room/${roomId}/member/${userId}`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    /**
     * Get Group Member IDs
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-group-member-user-ids
     */
    getGroupMemberIds(groupId, start, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get(`/v2/bot/group/${groupId}/members/ids${start ? `?start=${start}` : ''}`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    getAllGroupMemberIds(groupId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let allMemberIds = [];
            let continuationToken;
            do {
                const { memberIds, next, } = // eslint-disable-next-line no-await-in-loop
                 yield this.getGroupMemberIds(groupId, continuationToken, options);
                allMemberIds = allMemberIds.concat(memberIds);
                continuationToken = next;
            } while (continuationToken);
            return allMemberIds;
        });
    }
    /**
     * Get Room Member IDs
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#get-room-member-user-ids
     */
    getRoomMemberIds(roomId, start, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get(`/v2/bot/room/${roomId}/members/ids${start ? `?start=${start}` : ''}`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    getAllRoomMemberIds(roomId, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            let allMemberIds = [];
            let continuationToken;
            do {
                const { memberIds, next, } = // eslint-disable-next-line no-await-in-loop
                 yield this.getRoomMemberIds(roomId, continuationToken, options);
                allMemberIds = allMemberIds.concat(memberIds);
                continuationToken = next;
            } while (continuationToken);
            return allMemberIds;
        });
    }
    /**
     * Leave Group
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#leave-group
     */
    leaveGroup(groupId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .post(`/v2/bot/group/${groupId}/leave`, null, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    /**
     * Leave Room
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#leave-room
     */
    leaveRoom(roomId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .post(`/v2/bot/room/${roomId}/leave`, null, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    /**
     * Rich Menu
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#rich-menu
     */
    getRichMenuList({ accessToken: customAccessToken, } = {}) {
        return this._axios
            .get('/v2/bot/richmenu/list', customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data.richmenus, handleError);
    }
    getRichMenu(richMenuId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get(`/v2/bot/richmenu/${richMenuId}`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data)
            .catch(err => {
            if (err.response && err.response.status === 404) {
                return null;
            }
            return handleError(err);
        });
    }
    createRichMenu(richMenu, { accessToken: customAccessToken } = {}) {
        return this._axios
            .post('/v2/bot/richmenu', richMenu, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    deleteRichMenu(richMenuId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .delete(`/v2/bot/richmenu/${richMenuId}`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    getLinkedRichMenu(userId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get(`/v2/bot/user/${userId}/richmenu`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data)
            .catch(err => {
            if (err.response && err.response.status === 404) {
                return null;
            }
            return handleError(err);
        });
    }
    linkRichMenu(userId, richMenuId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .post(`/v2/bot/user/${userId}/richmenu/${richMenuId}`, null, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    unlinkRichMenu(userId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .delete(`/v2/bot/user/${userId}/richmenu`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    getDefaultRichMenu({ accessToken: customAccessToken, } = {}) {
        return this._axios
            .get(`/v2/bot/user/all/richmenu`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data)
            .catch(err => {
            if (err.response && err.response.status === 404) {
                return null;
            }
            return handleError(err);
        });
    }
    setDefaultRichMenu(richMenuId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .post(`/v2/bot/user/all/richmenu/${richMenuId}`, null, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    deleteDefaultRichMenu({ accessToken: customAccessToken, } = {}) {
        return this._axios
            .delete(`/v2/bot/user/all/richmenu`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    /**
     * - Images must have one of the following resolutions: 2500x1686, 2500x843.
     * - You cannot replace an image attached to a rich menu.
     *   To update your rich menu image, create a new rich menu object and upload another image.
     */
    uploadRichMenuImage(richMenuId, image, { accessToken: customAccessToken } = {}) {
        const type = image_type_1.default(image);
        invariant_1.default(type && (type.mime === 'image/jpeg' || type.mime === 'image/png'), 'Image must be `image/jpeg` or `image/png`');
        return this._axios
            .post(`/v2/bot/richmenu/${richMenuId}/content`, image, {
            headers: Object.assign({ 'Content-Type': type.mime }, (customAccessToken && {
                Authorization: `Bearer ${customAccessToken}`,
            })),
        })
            .then(res => res.data, handleError);
    }
    downloadRichMenuImage(richMenuId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get(`/v2/bot/richmenu/${richMenuId}/content`, {
            responseType: 'arraybuffer',
            headers: Object.assign({}, (customAccessToken && {
                Authorization: `Bearer ${customAccessToken}`,
            })),
        })
            .then(res => Buffer.from(res.data))
            .catch(err => {
            if (err.response && err.response.status === 404) {
                return null;
            }
            return handleError(err);
        });
    }
    /**
     * Account link
     *
     * https://developers.line.me/en/docs/messaging-api/reference/#account-link
     */
    issueLinkToken(userId, { accessToken: customAccessToken } = {}) {
        warning_1.default(false, '`issueLinkToken` is deprecated. Use `getLinkToken` instead. Note: It returns a string instead of an object.');
        return this._axios
            .post(`/v2/bot/user/${userId}/linkToken`, null, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    getLinkToken(userId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .post(`/v2/bot/user/${userId}/linkToken`, null, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data.linkToken, handleError);
    }
    /**
     * LINE Front-end Framework (LIFF)
     *
     * https://developers.line.me/en/docs/liff/reference/#add-liff-app
     */
    getLiffAppList({ accessToken: customAccessToken, } = {}) {
        return this._axios
            .get('/liff/v1/apps', customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data.apps, handleError);
    }
    createLiffApp(view, { accessToken: customAccessToken } = {}) {
        return this._axios
            .post('/liff/v1/apps', view, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    updateLiffApp(liffId, view, { accessToken: customAccessToken } = {}) {
        return this._axios
            .put(`/liff/v1/apps/${liffId}/view`, view, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    deleteLiffApp(liffId, { accessToken: customAccessToken } = {}) {
        return this._axios
            .delete(`/liff/v1/apps/${liffId}`, customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    /**
     * Get number of messages sent
     *
     */
    // https://developers.line.biz/en/reference/messaging-api/#get-quota
    getTargetLimitForAdditionalMessages({ accessToken: customAccessToken, } = {}) {
        return this._axios
            .get('/v2/bot/message/quota', customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    // https://developers.line.biz/en/reference/messaging-api/#get-consumption
    getNumberOfMessagesSentThisMonth({ accessToken: customAccessToken, } = {}) {
        return this._axios
            .get('/v2/bot/message/quota/consumption', customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
    // https://developers.line.biz/en/reference/messaging-api/#get-number-of-reply-messages
    getNumberOfSentReplyMessages(date, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get('/v2/bot/message/delivery/reply', Object.assign({ params: {
                date,
            } }, (customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})))
            .then(res => res.data, handleError);
    }
    // https://developers.line.biz/en/reference/messaging-api/#get-number-of-push-messages
    getNumberOfSentPushMessages(date, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get('/v2/bot/message/delivery/push', Object.assign({ params: {
                date,
            } }, (customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})))
            .then(res => res.data, handleError);
    }
    // https://developers.line.biz/en/reference/messaging-api/#get-number-of-multicast-messages
    getNumberOfSentMulticastMessages(date, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get('/v2/bot/message/delivery/multicast', Object.assign({ params: {
                date,
            } }, (customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})))
            .then(res => res.data, handleError);
    }
    // https://developers.line.biz/en/reference/messaging-api/#get-number-of-broadcast-messages
    getNumberOfSentBroadcastMessages(date, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get('/v2/bot/message/delivery/broadcast', Object.assign({ params: {
                date,
            } }, (customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})))
            .then(res => res.data, handleError);
    }
    /**
     * Insight
     *
     */
    // https://developers.line.biz/en/reference/messaging-api/#get-number-of-delivery-messages
    getNumberOfMessageDeliveries(date, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get('/v2/bot/insight/message/delivery', Object.assign({ params: {
                date,
            } }, (customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})))
            .then(res => res.data, handleError);
    }
    // https://developers.line.biz/en/reference/messaging-api/#get-number-of-followers
    getNumberOfFollowers(date, { accessToken: customAccessToken } = {}) {
        return this._axios
            .get('/v2/bot/insight/followers', Object.assign({ params: {
                date,
            } }, (customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})))
            .then(res => res.data, handleError);
    }
    // https://developers.line.biz/en/reference/messaging-api/#get-demographic
    getFriendDemographics({ accessToken: customAccessToken, } = {}) {
        return this._axios
            .get('/v2/bot/insight/demographic', customAccessToken
            ? {
                headers: { Authorization: `Bearer ${customAccessToken}` },
            }
            : {})
            .then(res => res.data, handleError);
    }
}
exports.default = LineClient;
//# sourceMappingURL=LineClient.js.map